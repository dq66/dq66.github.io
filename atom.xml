<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-09T03:59:27.668Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>DQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP面试常出现的题型</title>
    <link href="http://yoursite.com/2019/04/04/php-mst/"/>
    <id>http://yoursite.com/2019/04/04/php-mst/</id>
    <published>2019-04-04T04:02:32.000Z</published>
    <updated>2019-05-09T03:59:27.668Z</updated>
    
    <content type="html"><![CDATA[<p>最近想换工作搜索的一些面试题，整理一下方便以后还会用到。</p><p>单引号和双引号的区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答：1.双引号内部变量会被解析，单引号则不解析。</span><br><span class="line">    2.单引号解析速度比双引号块。</span><br><span class="line">    3.单引号只能解析部分特殊字符，双引号可以解析所有特殊字符。</span><br></pre></td></tr></table></figure></p><p>get和post的form表单的action有什么区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">答： 1.get是从服务器上获取数据，post是向服务器传送数据。</span><br><span class="line">    2.get是把参数数据队列加到提交表单的action属性所指的URL中，值和表单内各个字段--对应，在URL可以看到。</span><br><span class="line">    post是通过http post机制，将表单内各个字段与其内容放置在HTML header内一起传送到action属性所指的URL地址。用户看不到这个过程。</span><br><span class="line">    3.get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般默认为不受限制。</span><br><span class="line">    4.get安全性非常低，post安全性比较高。但是执行效率get却比post方法好。</span><br></pre></td></tr></table></figure></p><p>session工作原理？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">答：简单：为每个访问者创建一个唯一的id(session_id)</span><br><span class="line">        然后基于这个ID来存储变量</span><br><span class="line">        而ID存储在cookie中，或者通过URL进行传递</span><br><span class="line"></span><br><span class="line">    详细：浏览器与服务器之间使用http协议通讯，http协议是无状态的协议，问题就出现了：服务器不知道你是谁，你又做了什么。使用session之后就可以解决这个问题；但问题又出现了，服务器又是怎么来表示不同的用户和浏览器呢？在session的工作机制中，session会给每个访问者创建一个唯一的ID：session_id（这里的id类似于每个人的身份证号），服务器会将这个ID返回给客户端浏览器并存储在内存中，也就是cookie，浏览器关闭后会清空这个cookie；</span><br><span class="line">假如浏览器意外关闭，服务器保存的session数据不会立马清除，此时数据还会存在，只要我们知道那个session_id，就可以继续通过请求获得当前session的信息，但是session有个保存过期时间，一旦超过规定的时间没有客户端请求时，服务器就会清除当前的session信息。</span><br></pre></td></tr></table></figure></p><p>禁用cookie还能用session吗?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答：能使用。</span><br><span class="line">    通过GET或者POST请求，传递参数的方式传递sessionid不就可以了吗。但是这样做的方式是不可取的。</span><br></pre></td></tr></table></figure></p><p>session与cookie的区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、存储位置：session存储于服务器，cookie存储于浏览器</span><br><span class="line">2、安全性：session安全性比cookie高</span><br><span class="line">3、session为‘会话服务’，在使用时需要开启服务，cookie不需要开启，就可以直接使用。</span><br></pre></td></tr></table></figure></p><p>如何取出数组最后一个值？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：$list = array(&apos;22&apos;, &apos;ss&apos;, &apos;234&apos;);</span><br><span class="line"></span><br><span class="line">答：</span><br><span class="line">1.echo end($list);</span><br><span class="line">2.echo $list[count($list) - 1];</span><br><span class="line">3.array_pop($list);</span><br></pre></td></tr></table></figure></p><p>数组去重<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答：例如：$arr = array(&apos;11&apos;, &apos;2&apos;, &apos;1&apos;, &apos;4&apos;, &apos;2&apos;, 33);</span><br><span class="line">         print_r(array_unique($arr));</span><br></pre></td></tr></table></figure></p><p>数组[‘a’,’b’,’c’]转换成字符串’abc’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：implode(&apos;&apos;,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]); 或者 join([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],&apos;&apos;);</span><br></pre></td></tr></table></figure></p><p>获取字符串’aAbB’中A首次出现的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答：$str=&apos;aAbB&apos;;</span><br><span class="line">    // strpos是返回字符串第一次出现的位置</span><br><span class="line">    echo strpos($str,&apos;A&apos;);</span><br></pre></td></tr></table></figure></p><p>Git分支合并？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">答：merge,rebase,cherry-pick</span><br><span class="line">例如：</span><br><span class="line">    git checkout master</span><br><span class="line">    git merge test</span><br></pre></td></tr></table></figure></p><p>翻转字符串”example”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">    // 第一种 PHP自带strrev()函数</span><br><span class="line">    $str = &quot;Hello World!&quot;;</span><br><span class="line">    echo strrev($str);</span><br><span class="line"></span><br><span class="line">    // 第二种 strlen()函数获取字符串的长度，for循环，并拼接</span><br><span class="line">    $str = &apos;Hello World!&apos;;</span><br><span class="line">    $da = &apos;&apos;;</span><br><span class="line">    for ($i = 1; $i &lt;= strlen($str); $i++) &#123;</span><br><span class="line">        $da .= $str[strlen($str) - $i];</span><br><span class="line">    &#125;</span><br><span class="line">    echo $da;</span><br></pre></td></tr></table></figure></p><p>打印出2014-09-23 23:08:01的时间戳<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">答：时间戳：echo strtotime(&apos;2014-09-23 23:08:01&apos;);</span><br><span class="line"></span><br><span class="line">时间戳转换成日期：</span><br><span class="line">$str = strtotime(&apos;2014-09-23 23:08:01&apos;);</span><br><span class="line">echo date(&apos;Y-m-d H:i:s&apos;,$str);</span><br><span class="line"></span><br><span class="line">打印出前一天的时间，格式是2018-05-31 12：14：24</span><br><span class="line">答：echo date(&apos;Y-m-d H:i:s&apos;,strtotime(&apos;-1 days&apos;));</span><br><span class="line">    格式：2018-5-31 12：14：24</span><br><span class="line">    echo date(&apos;Y-n-d H:i:s&apos;,strtotime(&apos;-1 days&apos;));</span><br></pre></td></tr></table></figure></p><p>根据给定的年和月计算出给定的月的天数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">    function day_count($year, $month)</span><br><span class="line">    &#123;</span><br><span class="line">        echo date(&apos;t&apos;, strtotime($year . &apos;-&apos; . $month . &apos;-1&apos;));</span><br><span class="line">    &#125;</span><br><span class="line">    print_r(day_count(2019, 3));</span><br></pre></td></tr></table></figure></p><p>一个文件的路径为/wwwroot/include/page.class.php,写出该文件扩展名的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">unction kzm($url)&#123;</span><br><span class="line">    $aa = pathinfo($url);</span><br><span class="line">    // strrpos是返回字符串最后一次出现的位置</span><br><span class="line">    $str = substr($aa[&apos;basename&apos;], strrpos($aa[&apos;basename&apos;], &apos;.&apos;));</span><br><span class="line">    $k = explode(&quot;?&quot;, $str);</span><br><span class="line">    echo $k[0];</span><br><span class="line">&#125;</span><br><span class="line">//  kzm(&apos;http://www.sina.com.cn/abc/de/fg.php?id=1&apos;);</span><br><span class="line">    kzm(&apos;/wwwroot/include/page.class.php&apos;);</span><br></pre></td></tr></table></figure></p><p>有一个网页地址，例如<a href="http://www.baidu.com，如何得到它的内容？" target="_blank" rel="noopener">http://www.baidu.com，如何得到它的内容？</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：echo file_get_contents(&apos;http://www.baidu.com&apos;);</span><br></pre></td></tr></table></figure></p><p>debug方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">答：1.首先修改php.ini里面把错误开关全部修改为on，然后在代码里面执行下面代码：</span><br><span class="line">    ini_set(&apos;display_errors&apos;,1); //错误信息</span><br><span class="line">    ini_set(&apos;display_startup_errors&apos;,1); //php启动错误信息</span><br><span class="line">    error_reporting(-1); //打印出所有的错误信息</span><br><span class="line"></span><br><span class="line">    2.直接在php文件前面加上两行码：</span><br><span class="line">    ini_set(&apos;display_errors&apos;,&apos;On&apos;);</span><br><span class="line">    error_reporting(E_ALL);</span><br></pre></td></tr></table></figure></p><p>Composer用法？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">1.生成项目：composer create-project --prefer-dist laravel/laravel bolg(生成laravel项目)</span><br><span class="line">2.安装依赖包：比如我们的项目现在需要依赖monolog/monolog这样的一个包，那接下来，我们就需要在composer.json中写入以下内容：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;require&quot;:&#123;</span><br><span class="line">        &quot;monolog/monolog&quot;:&quot;1.0.*&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">接下来在命令行执行：composer install</span><br><span class="line"></span><br><span class="line">3.更新依赖版本：composer update</span><br><span class="line">4.自动加载：已经存在的库，我们要把它加载到我们的项目中，对于库的自动加载信息，Composer生成了一个vendor/autoload.php文件。我们可以简单的引入这个文件，这样就会得到一个免费的自动加载支持。而这一切都是Composer来帮助我们完成的，我们只需要在应用层使用即可。例如：</span><br><span class="line">    require &apos;vendor/autoload.php&apos;;</span><br></pre></td></tr></table></figure></p><p>Linux<br>挑选两个命令（如：find、awk）用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">答：find 文件搜索，</span><br><span class="line">    find / -name file1  //从&apos;/&apos;开始进入根文件系统搜文件和目录</span><br><span class="line"></span><br><span class="line">    awk  行处理器</span><br><span class="line">    -F指定分隔符（$1 指指定分隔符后，第一个字段，$3第三个字段， \t是制表符</span><br><span class="line">一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格）</span><br><span class="line">    awk -F&quot;:&quot;&apos;&#123;print $1 $3&#125;&apos; /etc/passwd  //$1与$3相连输出，不分隔</span><br><span class="line">    awk -F&quot;:&quot;&apos;&#123;print $1,$3&#125;&apos; /etc/passwd  //多了一个逗号，$1与$3使用逗号分隔</span><br><span class="line"></span><br><span class="line">    匹配代码块（//纯字符匹配   !//纯字符不匹配   ~//字段值匹配    !~//字段值不匹配 ）</span><br><span class="line">    awk &apos;/[2][7][7]*/&#123;print $0&#125;&apos; /etc/passwd //匹配包含27为数字开头的行，如：27，277，2777...</span><br></pre></td></tr></table></figure></p><p>PHP中魔术方法？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">答: __construct()   //实例化对象时自动调用</span><br><span class="line">    __destruct()    //销毁对象或脚本执行结束时自动调用</span><br><span class="line">    __call()        //调用对象不存在的方法时执行此函数</span><br><span class="line">    __get()         //获取对象不存在的属性时执行此函数</span><br><span class="line">    __set()         //设置对象不存在的属性时执行此函数</span><br><span class="line">    __isset()       //检测对象的某个属性是否存在是执行此函数</span><br><span class="line">    __unset()       //销毁对象的某个属性时执行此函数</span><br><span class="line">    __toString()    //将对象当作字符串输出时执行此函数</span><br><span class="line">    __clone()       //克隆对象时执行此函数</span><br><span class="line">    __autoload()    //实例化对象时，当类不存在时，执行此函数自动加载类</span><br><span class="line">    __sleep()       //serialize之前被调用，可以指定要序列化的对象属性</span><br></pre></td></tr></table></figure></p><p>谈谈你对MVC的理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">答: MVC是Model-View-Controller的简称，分别是模型-视图-控制器。</span><br><span class="line">    MVC是一种框架模型，它强制的把应用程序的输入、处理和输出分开。</span><br><span class="line"></span><br><span class="line">    MVC的处理过程：首先控制器接收用户的请求，调用相应的模型来进行业务处理，</span><br><span class="line">    并返回数据给控制器。控制器调用相应的视图来显示处理的结果。并通过视图呈现给用户。</span><br><span class="line">    或</span><br><span class="line">    由控制器层调用模型处理数据，然后将数据映射到视图层进行显示。</span><br><span class="line"></span><br><span class="line">    优点：耦合性低，重用性高。</span><br><span class="line"></span><br><span class="line">    缺点：没有明确的定义，不合适小型、中等规模的应用程序，增加系统结构实现的复杂性。</span><br></pre></td></tr></table></figure></p><p>什么是SQL注入，如何防范？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">答：所谓SQL注入，就是通过把SQL命令插入到web表单提交或页面请求的字符串，</span><br><span class="line">    最终达到欺骗服务器执行恶意的SQL命令。</span><br><span class="line">    防范措施如下：</span><br><span class="line">    1、永远不要信任用户的输入。对用户的输入进行校验，过滤关键字和转义字符。</span><br><span class="line">    2、永远不要使用动态拼接SQL，可以使用参数化的SQL或直接使用存储有限的数据库连接。</span><br><span class="line">    3、不要把机密信息直接存放，加密或者hash掉密码和敏感信息。</span><br><span class="line">    防止SQL注入漏洞的函数有：addslashes()，mysql_escape_string()</span><br></pre></td></tr></table></figure></p><p>对json数据格式的理解？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：json是一种轻量级的数据交换格式，json数据格式固定，可以被多种语言用作数据的传递。</span><br></pre></td></tr></table></figure></p><p>print、echo、print_r有什么区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答：1.echo1和print都可以做输出，不同的是，echo不是函数，没有返回值，而print是一个函数有返回值，所有相对而言如果只是输出echo会更快，而print_r通常用于打印变量的相关信息，通常在调试中使用。</span><br><span class="line">    2、print是打印字符串</span><br><span class="line">    3、print_r则是打印复合类型 如：数组、对象</span><br></pre></td></tr></table></figure></p><p>char和varchar的区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答：char是一种固定长度的类型，varchar则是一种可变长度的类型。</span><br><span class="line">    char的数据长度大于char规定的长度就会去掉超过的数据，而varchar是在每个值长度上再加1字节</span><br></pre></td></tr></table></figure></p><p>if与switch的区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">答：首先if只是单纯地一个接一个比较；if...else每个条件都计算一遍；</span><br><span class="line">    而switch是使用了binary tree算法；绝大部分情况下switch会快一点，除非是if-else的第一个条件就为true。编译器编译switch与编译if-else是不同的，不管有多少个case，都直接跳转，不需要逐个比较查询；而且switch只计算一次值；有很多else if的时候，用switch case比较清晰。</span><br><span class="line"></span><br><span class="line">    总结：当只有分支比较少的时候，if效率比swit高（因为switch有跳转表）；分支比较多的时候，那当然是switch高了。</span><br></pre></td></tr></table></figure></p><p>MySQL的存储引擎，myisam和innodb的区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答：myisam是非事务的存储引擎；适合用于频繁查询的应用；不支持事务。适合小数据，小并发。</span><br><span class="line">    innodb是支持事务的存储引擎；适合于插入和更新操作比较多的应用；适合大数据，大并发。</span><br></pre></td></tr></table></figure></p><p>MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">答：1、设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。</span><br><span class="line">    2、选择合适的表字段数据类型和存储引擎，适当的添加索引。</span><br><span class="line">    3、做MySQL主从复制读写分离。</span><br><span class="line">    4、对数据表进行分表，减少单表中的数据量提高查询速度。</span><br><span class="line">    5、添加缓存机制，如：redis、memcached等。</span><br></pre></td></tr></table></figure></p><p>对于大流量的网站,您采用什么样的方法来解决各页面访问量统计问题？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">答：1、确认服务器是否能支撑当前访问量。</span><br><span class="line">    2、优化数据库访问。</span><br><span class="line">    3、禁止外部访问连接（盗链），比如图片盗链。</span><br><span class="line">    4、控制文件下载。</span><br><span class="line">    5、做负载均衡，使用不同主机分流。</span><br></pre></td></tr></table></figure></p><p>简述 private、 protected、 public修饰符的访问权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">    private：私有成员，在类的内部才可以访问。</span><br><span class="line">    protected：保护成员，该类内部和继承类中可以访问。</span><br><span class="line">    public：公共成员，完全公开，没有访问限制。</span><br></pre></td></tr></table></figure></p><p>堆和栈的区别？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答：栈是编译期间就分配好的内存空间，因此你的代码中必须就栈的大小明确的定义；</span><br><span class="line">    堆是程序运行期间动态分配的内存空间，你可以根据程序的运行情况确定要分配的堆内存的大小。</span><br></pre></td></tr></table></figure></p><p>$this和self、parent这三个关键词分别代表什么？在哪些场合下使用？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">答：$this 当前对象</span><br><span class="line">    self 当前类</span><br><span class="line">    parent 当前类的父类</span><br><span class="line">    在当前类中使用：</span><br><span class="line">        $this使用-&gt;调用属性和方法。</span><br><span class="line">        self使用::调用。</span><br></pre></td></tr></table></figure></p><p>作用域操作符::如何使用？都在哪些场合下使用？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答：1、调用类常量</span><br><span class="line">    2、调用静态方法（使用static修饰的类方法）</span><br></pre></td></tr></table></figure></p><p>使用一个函数将”aa,bb,cc”转换成数组？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：explode(&apos;,&apos;,&apos;aa,bb,cc&apos;);</span><br></pre></td></tr></table></figure></p><p>将一个对象转换成数组，例如{“aa”:22,”bb”:2342,”cc”:333}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答：$a=&apos;&#123;&quot;aa&quot;:22,&quot;bb&quot;:2342,&quot;cc&quot;:333&#125;&apos;;</span><br><span class="line">    $b= json_decode($a,true);</span><br><span class="line">    print_r($b);</span><br></pre></td></tr></table></figure></p><p>input标签有哪几种类型？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">答：1.text       文本</span><br><span class="line">    2.file      上传图片</span><br><span class="line">    3.password  密码</span><br><span class="line">    4.email     邮箱</span><br><span class="line">    5.button    按钮</span><br><span class="line">    6.date      时间(年/月/日)</span><br><span class="line">      month     时间(年/月)</span><br><span class="line">    7.checkbox  复选框</span><br><span class="line">    8.radio     单选框</span><br><span class="line">    9.hidden    隐藏</span><br><span class="line">    10.reset    重置</span><br><span class="line">    11.color    颜色</span><br><span class="line">    12.image    显示图片</span><br><span class="line">    。。。</span><br></pre></td></tr></table></figure></p><p>常见的http状态码？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">答：200         成功</span><br><span class="line">    201        创建资源</span><br><span class="line">    202        接受请求</span><br><span class="line">    301        永久性重定向</span><br><span class="line">    302        暂时性重定向</span><br><span class="line">    401        当前请求需要用户验证</span><br><span class="line">    403        没有授权</span><br><span class="line">    404        请求失败</span><br><span class="line">    500        服务器内部错误</span><br><span class="line">    501        服务器不支持请求的功能</span><br><span class="line">    502        网关错误</span><br></pre></td></tr></table></figure></p><p>MySQL的索引类型有哪些？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">答：普通索引</span><br><span class="line">    唯一索引</span><br><span class="line">    组合索引</span><br><span class="line">    全文索引</span><br></pre></td></tr></table></figure></p><p>面向对象的特征？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：封装、继承、多态、抽象</span><br></pre></td></tr></table></figure></p><p>一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n,输出最后那个大王的编号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">    function king($n,$m)&#123;</span><br><span class="line">        $mokey = range(1, $n);</span><br><span class="line">        $i = 0;</span><br><span class="line"></span><br><span class="line">        while (count($mokey) &gt;1) &#123;</span><br><span class="line">            $i += 1;</span><br><span class="line">            $head = array_shift($mokey);//一个个出列最前面的猴子</span><br><span class="line">            if ($i % $m !=0) &#123;</span><br><span class="line">                #如果不是m的倍数，则把猴子返回尾部，否则就抛掉，也就是出列</span><br><span class="line">                array_push($mokey,$head);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 剩下的最后一个就是大王了</span><br><span class="line">            return $mokey[0];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 测试</span><br><span class="line">    echo king(10,7);</span><br></pre></td></tr></table></figure></p><p>写一个函数，尽可能高效的从一个标准url中取出文件的扩展名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">    function getExt($url)</span><br><span class="line">    &#123;</span><br><span class="line">        $arr = parse_url($url);//parse_url解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分</span><br><span class="line">        //&apos;scheme&apos; =&gt; string &apos;http&apos; (length=4)</span><br><span class="line">        //&apos;host&apos; =&gt; string &apos;www.sina.com.cn&apos; (length=15)</span><br><span class="line">        //&apos;path&apos; =&gt; string &apos;/abc/de/fg.php&apos; (length=14)</span><br><span class="line">        //&apos;query&apos; =&gt; string &apos;id=1&apos; (length=4)</span><br><span class="line">        $file = basename($arr[&apos;path&apos;]);// basename函数返回路径中的文件名部分</span><br><span class="line">        $ext = explode(&apos;.&apos;, $file);</span><br><span class="line">        return $ext[count($ext)-1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  print(getExt(&apos;http://www.sina.com.cn/abc/de/fg.html.php?id=1&apos;));</span><br></pre></td></tr></table></figure></p><p>请使用冒泡排序法对以下一组数据进行排序10 2 36 14 10 25 23 85 99 45。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">    function px($data)</span><br><span class="line">    &#123;</span><br><span class="line">        $len = count($data);</span><br><span class="line">        for ($i = 0; $i &lt; $len; $i++) &#123;</span><br><span class="line">            for ($j = 1; $j &lt; $len - 1; $j++) &#123;</span><br><span class="line">                if ($data[$j - 1] &gt; $data[$j]) &#123;</span><br><span class="line">                    $temp = $data[$j - 1];</span><br><span class="line">                    $data[$j - 1] = $data[$j];</span><br><span class="line">                    $data[$j] = $temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $arr = array(10,2,36,14,10,25,23,85,99,45);</span><br><span class="line"></span><br><span class="line">    print_r(px($arr));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近想换工作搜索的一些面试题，整理一下方便以后还会用到。&lt;/p&gt;
&lt;p&gt;单引号和双引号的区别？&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="php开发" scheme="http://yoursite.com/categories/php%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php 获取当前域名、主机、URL等等</title>
    <link href="http://yoursite.com/2019/04/03/php/"/>
    <id>http://yoursite.com/2019/04/03/php/</id>
    <published>2019-04-03T02:27:20.000Z</published>
    <updated>2019-04-03T03:08:53.773Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 测试网址：http://localhost/home/cs.php?id=5</span><br><span class="line"></span><br><span class="line">// 获取域名或主机地址</span><br><span class="line">echo $_SERVER[&apos;HTTP_HOST&apos;].&quot;&lt;br&gt;&quot;; // localhost</span><br><span class="line"></span><br><span class="line">// 获取网页地址</span><br><span class="line">echo $_SERVER[&apos;PHP_SELF&apos;].&quot;&lt;br&gt;&quot;; // home/cs.php</span><br><span class="line"></span><br><span class="line">// 获取网址参数</span><br><span class="line">echo $_SERVER[&apos;QUERY_STRING&apos;].&quot;&lt;br&gt;&quot;; // id=5</span><br><span class="line"></span><br><span class="line">// 获取用户代理</span><br><span class="line">echo $_SERVER[&apos;HTTP_REFERER&apos;].&quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">// 获取完整的URL</span><br><span class="line">echo &apos;http://&apos;.$_SERVER[&apos;HTTP_HOST&apos;].$_SERVER[&apos;REQUEST_URI&apos;];</span><br><span class="line">echo &apos;http://&apos;.$_SERVER[&apos;HTTP_HOST&apos;].$_SERVER[&apos;PHP_SELF&apos;].&apos;?&apos;.$_SERVER[&apos;QUERY_STRING&apos;];</span><br><span class="line">// http://localhost/home/testurl.php?id=5</span><br><span class="line"></span><br><span class="line">// 包含端口号的完整URL</span><br><span class="line">echo &apos;http://&apos;.$_SERVER[&apos;SERVER_NAME&apos;].&apos;:&apos;.$_SERVER[&apos;SERVER_PORT&apos;].$_SERVER[&apos;REQUEST_URI&apos;];</span><br><span class="line">// http://localhost:80/home/cs.php?id=5</span><br><span class="line"></span><br><span class="line">// 只取路径</span><br><span class="line">$url =&apos;http://&apos;.$_SERVER[&apos;SERVER_NAME&apos;].$_SERVER[&apos;REQUEST_URI&apos;];</span><br><span class="line">echo dirname($url);</span><br><span class="line">// http://localhost/home</span><br><span class="line"></span><br><span class="line">// 获取当前服务器系统</span><br><span class="line">echo php_uname();</span><br><span class="line"></span><br><span class="line">// php运行方式</span><br><span class="line">echo php_sapi_name();</span><br><span class="line"></span><br><span class="line">// 获取服务器IP</span><br><span class="line">echo gethostbyname($_SERVER[&apos;SERVER_NAME&apos;]);</span><br><span class="line"></span><br><span class="line">// 获取PHP版本</span><br><span class="line">echo phpversion();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="php开发" scheme="http://yoursite.com/categories/php%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>laravel ApiServiceProvide跟setEventDispatcher的错</title>
    <link href="http://yoursite.com/2019/03/15/mac-laravel/"/>
    <id>http://yoursite.com/2019/03/15/mac-laravel/</id>
    <published>2019-03-15T08:58:28.000Z</published>
    <updated>2019-03-15T09:34:33.155Z</updated>
    
    <content type="html"><![CDATA[<p>今天运行之前写的laravel项目 突然偶遇两个错</p><h2 id="第一个："><a href="#第一个：" class="headerlink" title="第一个："></a>第一个：</h2><p><img src="/public/bog2.png" alt="aa" title="图片"></p><p>解决方法：<br>在laravel项目根目录里面的.env文件，并在.env文件中添加 API_PREFIX=api<br><img src="/public/bog-1.png" alt="aa-1" title="图片"><br>第一个bog就这么愉快的解决了。</p><h2 id="第二个："><a href="#第二个：" class="headerlink" title="第二个："></a>第二个：</h2><p><img src="/public/bog1.png" alt="bb" title="图片"></p><p>解决方法：<br>在laravel项目里面找到此目录”config/app.php”，并在app.php文件里面添加一下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aliases'</span> =&gt; [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'setEventDispatcher'</span> =&gt; Illuminate\Events\Dispatcher::class,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后保存，重新运行就OK了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天运行之前写的laravel项目 突然偶遇两个错&lt;/p&gt;
&lt;h2 id=&quot;第一个：&quot;&gt;&lt;a href=&quot;#第一个：&quot; class=&quot;headerlink&quot; title=&quot;第一个：&quot;&gt;&lt;/a&gt;第一个：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/public/bog2.png&quot; a
      
    
    </summary>
    
      <category term="php开发" scheme="http://yoursite.com/categories/php%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
      <category term="php7.3" scheme="http://yoursite.com/tags/php7-3/"/>
    
      <category term="mysql8.0" scheme="http://yoursite.com/tags/mysql8-0/"/>
    
      <category term="laravel5.6" scheme="http://yoursite.com/tags/laravel5-6/"/>
    
  </entry>
  
  <entry>
    <title>Mac下使用Docker-compose搭建nginx+php+mysql环境</title>
    <link href="http://yoursite.com/2018/11/23/mac-docker-compose-nginx-php-mysql/"/>
    <id>http://yoursite.com/2018/11/23/mac-docker-compose-nginx-php-mysql/</id>
    <published>2018-11-23T08:09:01.000Z</published>
    <updated>2018-11-30T08:48:00.634Z</updated>
    
    <content type="html"><![CDATA[<p>Compose 是一个用户定义和运行多个容器的 Docker 应用程序。只需要一个简单的命令，就可以创建并启动你配置的所有服务。</p><p>使用 Compose 基本会有如下三步流程：</p><p>1.在 Dockfile 中定义你的应用环境，使其可以在任何地方复制。<br>2.在 docker-compose.yml 中定义组成应用程序的服务，以便它们可以在隔离的环境中一起运行。<br>3.最后，运行dcoker-compose up，Compose 将启动并运行整个应用程序。</p><p><strong>安装compose</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载最新版的docker-compose文件</span></span><br><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试安装结果</span></span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.16.1, build 6d1ac21</span><br></pre></td></tr></table></figure></p><p><strong>在宿主机上创建好共享给容器的文件，如 进入桌面 配置文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$PWD</span>/Docker-PHP/docker/conf/nginx <span class="variable">$PWD</span>/Docker-PHP/docker/php-fpm7.1 <span class="variable">$PWD</span>/Docker-php/<span class="built_in">log</span>/nginx</span><br><span class="line"><span class="comment"># docker       目录里的配置文件将映射为 nginx、php 容器的配置文件</span></span><br><span class="line"><span class="comment"># log          目录将映射为 nginx 容器的日志目录。</span></span><br></pre></td></tr></table></figure></p><p><strong>进入Desktop/Docker-PHP/docker/conf/nginx目录，创建nginx.conf文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br><span class="line"><span class="comment"># nginx.conf文件内容如下：</span></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes 1;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line"><span class="comment"># gzip  on;</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    log_format main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    sendfile on;</span><br><span class="line"><span class="comment"># tcp_nopush     on;</span></span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 然后保存退出（wq）</span></span><br></pre></td></tr></table></figure></p><p><strong>进入创建的Desktop/Docker-PHP/docker/conf/nginx 目录,创建 conf.d 目录,再在进入 conf.d 目录里编写default.conf文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mkdir conf.d</span><br><span class="line"></span><br><span class="line">vim default.conf</span><br><span class="line"><span class="comment"># 内容如下：</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server ipv6only=on;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root /var/www/html;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php<span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php =404;</span><br><span class="line">        fastcgi_pass 7.1-fpm:9000;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 最后保存退出（wq）</span></span><br></pre></td></tr></table></figure></p><p><strong>再回到Desktop/Docker-PHP/docker/php-fpm7.1目录下编写Dockerfile文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br><span class="line"><span class="comment"># 内容如下：</span></span><br><span class="line">FROM php:7.1-fpm</span><br><span class="line"></span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    libfreetype6-dev \</span><br><span class="line">    libjpeg62-turbo-dev \</span><br><span class="line">    libmcrypt-dev \</span><br><span class="line">    <span class="comment"># libpng12-dev \</span></span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt mysqli pdo_mysql \</span><br><span class="line">    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) gd</span><br><span class="line"><span class="comment"># 然后保存退出（wq）</span></span><br></pre></td></tr></table></figure></p><p><strong>再在Docker-PHP目录下创建index.php文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim index.php</span><br><span class="line"><span class="comment"># 内容如下</span></span><br><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Docker-PHP目录下编写docker-compose.yml文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"><span class="comment">### Nginx Server Container ##################################</span></span><br><span class="line">    nginx:</span><br><span class="line">      <span class="comment"># nginx镜像的路径</span></span><br><span class="line">      image: nginx:alpine</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 将宿主机上nginx配置文件跟日志目录映射到容器中</span></span><br><span class="line">      volumes:</span><br><span class="line">          - ./:/var/www/html</span><br><span class="line">          - ./docker/conf/nginx/nginx.conf:/etc/nginx/nginx.conf</span><br><span class="line">          - ./docker/conf/nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">          - ./<span class="built_in">log</span>/nginx/:/var/<span class="built_in">log</span>/nginx/:rw</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 端口映射</span></span><br><span class="line">      ports:</span><br><span class="line">          - <span class="string">"8888:80"</span></span><br><span class="line">          - <span class="string">"8080:8080"</span></span><br><span class="line">          - <span class="string">"443:443"</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 依赖关系，需要先运行php</span></span><br><span class="line">      links:</span><br><span class="line">          - 7.1-fpm</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 进程予赋特权权限</span></span><br><span class="line">      privileged: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      networks:</span><br><span class="line">        - app_net</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 容器名称</span></span><br><span class="line">      container_name: <span class="string">"Nginx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### PHP-FPM 7.1 Container #######################################</span></span><br><span class="line">    7.1-fpm:</span><br><span class="line">        <span class="comment"># php镜像的路径</span></span><br><span class="line">        build:</span><br><span class="line">          context: ./docker/php-fpm7.1</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将宿主机上Docker-php根目录映射到容器中</span></span><br><span class="line">        volumes:</span><br><span class="line">          - ./:/var/www/html</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 端口映射</span></span><br><span class="line">        ports:</span><br><span class="line">          - <span class="string">"9000"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 依赖关系，需要先运行mysql</span></span><br><span class="line">        links:</span><br><span class="line">          - mysql</span><br><span class="line"></span><br><span class="line">        networks:</span><br><span class="line">          - app_net</span><br><span class="line">        <span class="comment"># 容器名称</span></span><br><span class="line">        container_name: <span class="string">"PHP-FMP-7.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## MySQL Container #########################################</span></span><br><span class="line">    mysql:</span><br><span class="line">        <span class="comment"># mysql镜像的路径</span></span><br><span class="line">        image: mysql:5.7</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 端口映射</span></span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">"3306:3306"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置 root 账号密码为 root</span></span><br><span class="line">        environment:</span><br><span class="line">            - MYSQL_ROOT_PASSWORD=root</span><br><span class="line"></span><br><span class="line">        networks:</span><br><span class="line">            - app_net</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 容器名称</span></span><br><span class="line">        container_name: <span class="string">"MySQL"</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">    <span class="comment"># 配置docker 网络</span></span><br><span class="line">    app_net:</span><br><span class="line">        driver: bridge</span><br></pre></td></tr></table></figure></p><p>最后在Docker-PHP目录下运行 docker-compose up -d,运行成功后 访问浏览器 localhost：8888 不出意外会看到PHP配置信息，如图：<br><img src="/public/phpinfo.png" alt="图片" title="php信息"><br>看到上面的图片信息后表示安装成功。</p><p>这里可以去下载搭建好php环境 <a href="https://github.com/Teeoo/Docker-PHP" target="_blank" rel="noopener">https://github.com/Teeoo/Docker-PHP</a> ，里面Nginx、PHP7.2、PHP7.1、PHP5.6、MySQL等，还可以加载其他的 根据自己需要来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Compose 是一个用户定义和运行多个容器的 Docker 应用程序。只需要一个简单的命令，就可以创建并启动你配置的所有服务。&lt;/p&gt;
&lt;p&gt;使用 Compose 基本会有如下三步流程：&lt;/p&gt;
&lt;p&gt;1.在 Dockfile 中定义你的应用环境，使其可以在任何地方复制。
      
    
    </summary>
    
      <category term="php开发" scheme="http://yoursite.com/categories/php%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="docker-compose" scheme="http://yoursite.com/tags/docker-compose/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mac下使用Docker搭建Nginx+Php7.2+Mysql环境</title>
    <link href="http://yoursite.com/2018/11/15/mac-docker-nginx-php-mysql/"/>
    <id>http://yoursite.com/2018/11/15/mac-docker-nginx-php-mysql/</id>
    <published>2018-11-15T09:29:08.000Z</published>
    <updated>2018-11-30T08:44:31.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install Docker</span><br></pre></td></tr></table></figure><p>下载完后在载入 Docker app 后，点击 Next，可能会询问你的 macOS 登陆密码，你输入即可。之后会弹出一个 Docker 运行的提示窗口，状态栏上也有有个小鲸鱼的图标(<img src="/public/xjy.png" alt="图片" title="测试">)。</p><p>启动终端后，通过命令可以检查安装后的 Docker 版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br></pre></td></tr></table></figure></p><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com。" target="_blank" rel="noopener">http://hub-mirror.c.163.com。</a></p><p>在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。<br><img src="/public/jxjs.png" alt="镜像加速" title="镜像加速"><br>之后我们可以通过 docker info 来查看是否配置成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">...</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> http://hub-mirror.c.163.com/</span><br><span class="line"> http://ead3d542.m.daocloud.io/</span><br><span class="line">Live Restore Enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull ubuntu:14:04</span><br></pre></td></tr></table></figure><p>下载好了以后，再设置以守护进程在后台运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name my-lnmp ubuntu:14.04</span><br></pre></td></tr></table></figure></p><h2 id="配置容器内的lnmp环境"><a href="#配置容器内的lnmp环境" class="headerlink" title="配置容器内的lnmp环境"></a>配置容器内的lnmp环境</h2><p>1.更换apt-get源提高安装速度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it my-lnmp bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行完后 更新</span></span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure></p><p>2.安装常用工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y curl vim unzip zip php-zip</span><br></pre></td></tr></table></figure></p><p>3.解决可能存在的语言问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y language-pack-en-base</span><br><span class="line">locale-gen en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure></p><p>4.安装Nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件位置</span></span><br><span class="line"><span class="comment"># /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># /etc/nginx/conf.d/*.conf</span></span><br><span class="line"><span class="comment"># 默认主目录</span></span><br><span class="line"><span class="comment"># /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理nginx服务</span></span><br><span class="line">service nginx start/stop/restart  // 启动/停止/重启</span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">curl localhost</span><br></pre></td></tr></table></figure></p><p>如果出现Welcome to nginx!类似的字样，说明nginx安装成功了</p><p>5.安装PHP7.2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加PHP的仓库</span></span><br><span class="line">apt-get install -y software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加PHP源</span></span><br><span class="line">add-apt-repository ppa:ondrej/php</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PHP7.2以及一些扩展 这里的版本跟扩展看自己需要的来</span></span><br><span class="line">apt-get install -y php7.2 php7.2-mysql php7.2-fpm php7.2-curl php7.2-xml php7.2-json php7.2-gd php7.2-mbstring php7.0-zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 (出来信息标示安装成功)</span></span><br><span class="line">php -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置php.ini</span></span><br><span class="line">vim /etc/php/7.2/fpm/php.ini</span><br><span class="line"><span class="comment"># 将cgi.fix_pathinfo=1这一行去掉注释，将1改为0</span></span><br><span class="line"><span class="comment">#&gt;  / 是vi查找的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置php-fpm</span></span><br><span class="line">vim /etc/php/7.2/fpm/pool.d/www.conf</span><br><span class="line"><span class="comment"># 修改 listen = /var/run/php/php7.2-fpm.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置nginx</span></span><br><span class="line">vim /etc/nginx/sites-enabled/default</span><br><span class="line"><span class="comment"># 将`index index.html index.htm;`改成`index index.php index.html index.htm;`</span></span><br><span class="line"><span class="comment"># 在`service`里面，`location /&#123;&#125;`下面增加以下配置</span></span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> You should have "cgi.fix_pathinfo = 0;" in php.ini</span></span><br><span class="line">    <span class="comment"># With php5-cgi alone:</span></span><br><span class="line">    <span class="comment"># fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment"># With php5-fpm:</span></span><br><span class="line">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动php-fpm</span></span><br><span class="line">service php7.2-fpm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Nginx ，检测配置是否成功</span></span><br><span class="line">service nginx reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目目录，并给权限</span></span><br><span class="line">mkdir apps</span><br><span class="line">chmod -R 777 /apps/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建 index.php 测试文件</span></span><br><span class="line"><span class="comment"># 写入内容，保存(wq)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">curl localhost</span><br><span class="line"><span class="comment"># 如果看到`hello world!`表示运行成功</span></span><br></pre></td></tr></table></figure></p><h2 id="7-安装MySQL"><a href="#7-安装MySQL" class="headerlink" title="7.安装MySQL"></a>7.安装MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装过程中会提示输入密码及确认密码，输入即可</span></span><br><span class="line">apt-get install -y mysql-server-5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">service mysql start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 输入密码后进入到mysql表示安装成功</span></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="8-设置容器开机启动项"><a href="#8-设置容器开机启动项" class="headerlink" title="8.设置容器开机启动项"></a>8.设置容器开机启动项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在.bashrc写入开机启动项</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入以下内容，保存</span></span><br><span class="line"><span class="comment"># 开机启动项</span></span><br><span class="line">service php7.2-fpm start</span><br><span class="line">service mysql start</span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure><h2 id="9-安装composer"><a href="#9-安装composer" class="headerlink" title="9.安装composer"></a>9.安装composer</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo curl -sS https://getcomposer.org/installer | sudo php -d detect_unicode=Off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改文件权限</span></span><br><span class="line">sudo chmod a+x composer.phar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到全局安装文件夹</span></span><br><span class="line">sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Composer 源更换为国内</span></span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试（输入版本信息就说明安装成功了）</span></span><br><span class="line">composer</span><br></pre></td></tr></table></figure><h2 id="10-将配置好的Docker容器，将容器打包成镜像-打包"><a href="#10-将配置好的Docker容器，将容器打包成镜像-打包" class="headerlink" title="10.将配置好的Docker容器，将容器打包成镜像,打包"></a>10.将配置好的Docker容器，将容器打包成镜像,打包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出 Docker</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前容器对应CONTAINER ID</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将容器打包新的镜像 (ID: 2c10b080cf8c)</span></span><br><span class="line">docker commit 2c10b080cf8c kfk-lnmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看新的镜像/Pull的镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用刚打包的镜像，创建新的容器</span></span><br><span class="line">docker run -dit -p 80:80 -p 3306:3306 -v /var/www/:/apps/  --name nginx-mysql-php7.2-composer new-lnmp /bin/bash</span><br><span class="line"><span class="comment"># -p 端口映射</span></span><br><span class="line"><span class="comment"># -v 本地目录映射到容器内</span></span><br></pre></td></tr></table></figure><p>在浏览器通过访问<code>localhost</code>响应成功，则大功告成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; class=&quot;headerlink&quot; title=&quot;安装Docker&quot;&gt;&lt;/a&gt;安装Docker&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="php开发" scheme="http://yoursite.com/categories/php%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
</feed>
