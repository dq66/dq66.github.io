{"meta":{"title":"Hello","subtitle":null,"description":null,"author":"DQ","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2018-11-30T09:02:52.737Z","updated":"2018-11-27T05:36:51.860Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2018-11-30T09:02:11.063Z","updated":"2018-11-26T07:34:49.279Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-11-30T09:03:23.298Z","updated":"2018-11-26T09:51:21.481Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-11-30T09:02:21.145Z","updated":"2018-11-26T08:50:00.662Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-11-30T09:02:29.439Z","updated":"2018-11-26T08:52:09.101Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"laravel ApiServiceProvide跟setEventDispatcher的错","slug":"mac-laravel","date":"2019-03-15T08:58:28.000Z","updated":"2019-03-15T09:16:25.474Z","comments":true,"path":"2019/03/15/mac-laravel/","link":"","permalink":"http://yoursite.com/2019/03/15/mac-laravel/","excerpt":"","text":"今天运行之前写的laravel项目 突然偶遇两个错 第一个： 解决方法：在laravel项目根目录里面的.env文件，并在.env文件中添加 API_PREFIX=api第一个bog就这么愉快的解决了。 第二个： 解决方法：在laravel项目里面找到此目录”config/app.php”，并在app.php文件里面添加一下代码：1234'aliases' =&gt; [ ... 'setEventDispatcher' =&gt; Illuminate\\Events\\Dispatcher::class,] 然后保存，重新运行就OK了。","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"max","slug":"max","permalink":"http://yoursite.com/tags/max/"},{"name":"php7.3","slug":"php7-3","permalink":"http://yoursite.com/tags/php7-3/"},{"name":"mysql8.0","slug":"mysql8-0","permalink":"http://yoursite.com/tags/mysql8-0/"},{"name":"laravel5.6","slug":"laravel5-6","permalink":"http://yoursite.com/tags/laravel5-6/"}]},{"title":"Mac下使用Docker-compose搭建nginx+php+mysql环境","slug":"mac-docker-compose-nginx-php-mysql","date":"2018-11-23T08:09:01.000Z","updated":"2018-11-30T08:48:00.634Z","comments":true,"path":"2018/11/23/mac-docker-compose-nginx-php-mysql/","link":"","permalink":"http://yoursite.com/2018/11/23/mac-docker-compose-nginx-php-mysql/","excerpt":"","text":"Compose 是一个用户定义和运行多个容器的 Docker 应用程序。只需要一个简单的命令，就可以创建并启动你配置的所有服务。 使用 Compose 基本会有如下三步流程： 1.在 Dockfile 中定义你的应用环境，使其可以在任何地方复制。2.在 docker-compose.yml 中定义组成应用程序的服务，以便它们可以在隔离的环境中一起运行。3.最后，运行dcoker-compose up，Compose 将启动并运行整个应用程序。 安装compose123456789# 下载最新版的docker-compose文件$ sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose# 添加可执行权限$ sudo chmod +x /usr/local/bin/docker-compose# 测试安装结果$ docker-compose --versiondocker-compose version 1.16.1, build 6d1ac21 在宿主机上创建好共享给容器的文件，如 进入桌面 配置文件123mkdir -p $PWD/Docker-PHP/docker/conf/nginx $PWD/Docker-PHP/docker/php-fpm7.1 $PWD/Docker-php/log/nginx# docker 目录里的配置文件将映射为 nginx、php 容器的配置文件# log 目录将映射为 nginx 容器的日志目录。 进入Desktop/Docker-PHP/docker/conf/nginx目录，创建nginx.conf文件1234567891011121314151617181920212223vim nginx.conf# nginx.conf文件内容如下：user nginx;worker_processes 1;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include /etc/nginx/mime.types;# gzip on; include /etc/nginx/conf.d/*.conf; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on;# tcp_nopush on; keepalive_timeout 65;&#125;# 然后保存退出（wq） 进入创建的Desktop/Docker-PHP/docker/conf/nginx 目录,创建 conf.d 目录,再在进入 conf.d 目录里编写default.conf文件1234567891011121314151617181920212223242526mkdir conf.dvim default.conf# 内容如下：server &#123; listen 80 default_server; listen [::]:80 default_server ipv6only=on; server_name localhost; root /var/www/html; index index.php index.html index.htm; location / &#123; try_files $uri $uri/ /index.php$is_args$args; &#125; location ~ \\.php$ &#123; try_files $uri /index.php =404; fastcgi_pass 7.1-fpm:9000; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ /\\.ht &#123; deny all; &#125;&#125;# 最后保存退出（wq） 再回到Desktop/Docker-PHP/docker/php-fpm7.1目录下编写Dockerfile文件123456789101112131415vim Dockerfile# 内容如下：FROM php:7.1-fpmENV TZ=Asia/ShanghaiRUN apt-get update &amp;&amp; apt-get install -y \\ libfreetype6-dev \\ libjpeg62-turbo-dev \\ libmcrypt-dev \\ # libpng12-dev \\ &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt mysqli pdo_mysql \\ &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\ &amp;&amp; docker-php-ext-install -j$(nproc) gd# 然后保存退出（wq） 再在Docker-PHP目录下创建index.php文件12345vim index.php# 内容如下&lt;?php phpinfo();?&gt; Docker-PHP目录下编写docker-compose.yml文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182vim docker-compose.ymlversion: '3'services:### Nginx Server Container ################################## nginx: # nginx镜像的路径 image: nginx:alpine # 将宿主机上nginx配置文件跟日志目录映射到容器中 volumes: - ./:/var/www/html - ./docker/conf/nginx/nginx.conf:/etc/nginx/nginx.conf - ./docker/conf/nginx/conf.d:/etc/nginx/conf.d - ./log/nginx/:/var/log/nginx/:rw # 端口映射 ports: - \"8888:80\" - \"8080:8080\" - \"443:443\" # 依赖关系，需要先运行php links: - 7.1-fpm # 进程予赋特权权限 privileged: true networks: - app_net # 容器名称 container_name: \"Nginx\"### PHP-FPM 7.1 Container ####################################### 7.1-fpm: # php镜像的路径 build: context: ./docker/php-fpm7.1 # 将宿主机上Docker-php根目录映射到容器中 volumes: - ./:/var/www/html # 端口映射 ports: - \"9000\" # 依赖关系，需要先运行mysql links: - mysql networks: - app_net # 容器名称 container_name: \"PHP-FMP-7.1\"## MySQL Container ######################################### mysql: # mysql镜像的路径 image: mysql:5.7 # 端口映射 ports: - \"3306:3306\" # 设置 root 账号密码为 root environment: - MYSQL_ROOT_PASSWORD=root networks: - app_net # 容器名称 container_name: \"MySQL\"networks: # 配置docker 网络 app_net: driver: bridge 最后在Docker-PHP目录下运行 docker-compose up -d,运行成功后 访问浏览器 localhost：8888 不出意外会看到PHP配置信息，如图：看到上面的图片信息后表示安装成功。 这里可以去下载搭建好php环境 https://github.com/Teeoo/Docker-PHP ，里面Nginx、PHP7.2、PHP7.1、PHP5.6、MySQL等，还可以加载其他的 根据自己需要来。","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"docker-compose","slug":"docker-compose","permalink":"http://yoursite.com/tags/docker-compose/"},{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"Mac下使用Docker搭建Nginx+Php7.2+Mysql环境","slug":"mac-docker-nginx-php-mysql","date":"2018-11-15T09:29:08.000Z","updated":"2018-11-30T08:44:31.971Z","comments":true,"path":"2018/11/15/mac-docker-nginx-php-mysql/","link":"","permalink":"http://yoursite.com/2018/11/15/mac-docker-nginx-php-mysql/","excerpt":"","text":"安装Docker1$ brew cask install Docker 下载完后在载入 Docker app 后，点击 Next，可能会询问你的 macOS 登陆密码，你输入即可。之后会弹出一个 Docker 运行的提示窗口，状态栏上也有有个小鲸鱼的图标()。 启动终端后，通过命令可以检查安装后的 Docker 版本。1$ docker --version 镜像加速鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。 在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。之后我们可以通过 docker info 来查看是否配置成功。123456$ docker info...Registry Mirrors: http://hub-mirror.c.163.com/ http://ead3d542.m.daocloud.io/Live Restore Enabled: false 下载镜像12# 拉取镜像docker pull ubuntu:14:04 下载好了以后，再设置以守护进程在后台运行1docker run -dit --name my-lnmp ubuntu:14.04 配置容器内的lnmp环境1.更换apt-get源提高安装速度12345# 进入容器内部docker exec -it my-lnmp bin/bash# 执行完后 更新apt-get update 2.安装常用工具1apt-get install -y curl vim unzip zip php-zip 3.解决可能存在的语言问题1234apt-get install -y language-pack-en-baselocale-gen en_US.UTF-8export LANG=en_US.UTF-8export LC_ALL=en_US.UTF-8 4.安装Nginx1234567891011121314# 安装sudo apt-get install -y nginx# 配置文件位置# /etc/nginx/nginx.conf# /etc/nginx/conf.d/*.conf# 默认主目录# /usr/share/nginx/html/# 管理nginx服务service nginx start/stop/restart // 启动/停止/重启测试curl localhost 如果出现Welcome to nginx!类似的字样，说明nginx安装成功了 5.安装PHP7.2123456789101112131415161718192021222324252627282930313233343536373839# 添加PHP的仓库apt-get install -y software-properties-common# 添加PHP源add-apt-repository ppa:ondrej/phpsudo apt-get update# 安装PHP7.2以及一些扩展 这里的版本跟扩展看自己需要的来apt-get install -y php7.2 php7.2-mysql php7.2-fpm php7.2-curl php7.2-xml php7.2-json php7.2-gd php7.2-mbstring php7.0-zip# 测试 (出来信息标示安装成功)php -v# 配置php.inivim /etc/php/7.2/fpm/php.ini# 将cgi.fix_pathinfo=1这一行去掉注释，将1改为0#&gt; / 是vi查找的命令# 配置php-fpmvim /etc/php/7.2/fpm/pool.d/www.conf# 修改 listen = /var/run/php/php7.2-fpm.sock# 配置nginxvim /etc/nginx/sites-enabled/default# 将`index index.html index.htm;`改成`index index.php index.html index.htm;`# 在`service`里面，`location /&#123;&#125;`下面增加以下配置location ~ \\.php$ &#123; fastcgi_split_path_info ^(.+\\.php)(/.+)$; # NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini # With php5-cgi alone: # fastcgi_pass 127.0.0.1:9000; # With php5-fpm: fastcgi_pass unix:/var/run/php/php7.2-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params;&#125; 6.运行12345678910111213141516# 启动php-fpmservice php7.2-fpm start# 重启 Nginx ，检测配置是否成功service nginx reload# 创建项目目录，并给权限mkdir appschmod -R 777 /apps/# 新建 index.php 测试文件# 写入内容，保存(wq)# 执行curl localhost# 如果看到`hello world!`表示运行成功 7.安装MySQL1234567891011# 安装过程中会提示输入密码及确认密码，输入即可apt-get install -y mysql-server-5.7# 启动service mysql start# 测试mysql -uroot -p# 输入密码后进入到mysql表示安装成功# 退出exit 8.设置容器开机启动项12345678# 在.bashrc写入开机启动项vim ~/.bashrc# 写入以下内容，保存# 开机启动项service php7.2-fpm startservice mysql startservice nginx start 9.安装composer1234567891011121314# 安装sudo curl -sS https://getcomposer.org/installer | sudo php -d detect_unicode=Off# 更改文件权限sudo chmod a+x composer.phar# 切换到全局安装文件夹sudo mv composer.phar /usr/local/bin/composer# 将 Composer 源更换为国内composer config -g repo.packagist composer https://packagist.phpcomposer.com# 测试（输入版本信息就说明安装成功了）composer 10.将配置好的Docker容器，将容器打包成镜像,打包12345678910111213141516# 退出 Dockerexit# 查看当前容器对应CONTAINER IDdocker ps -a# 将容器打包新的镜像 (ID: 2c10b080cf8c)docker commit 2c10b080cf8c kfk-lnmp# 查看新的镜像/Pull的镜像docker images# 使用刚打包的镜像，创建新的容器docker run -dit -p 80:80 -p 3306:3306 -v /var/www/:/apps/ --name nginx-mysql-php7.2-composer new-lnmp /bin/bash# -p 端口映射# -v 本地目录映射到容器内 在浏览器通过访问localhost响应成功，则大功告成。","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]}]}