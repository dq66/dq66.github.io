{"meta":{"title":"Hello","subtitle":null,"description":null,"author":"DQ","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2018-11-30T09:02:52.737Z","updated":"2018-11-27T05:36:51.860Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2018-11-30T09:03:23.298Z","updated":"2018-11-26T09:51:21.481Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-11-30T09:02:11.063Z","updated":"2018-11-26T07:34:49.279Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-11-30T09:02:21.145Z","updated":"2018-11-26T08:50:00.662Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-11-30T09:02:29.439Z","updated":"2018-11-26T08:52:09.101Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PHP面试常出现的题型","slug":"php-mst","date":"2019-04-04T04:02:32.000Z","updated":"2019-06-15T01:41:41.910Z","comments":true,"path":"2019/04/04/php-mst/","link":"","permalink":"http://yoursite.com/2019/04/04/php-mst/","excerpt":"","text":"最近想换工作搜索的一些面试题，整理一下方便以后还会用到。 单引号和双引号的区别？123答：1.双引号内部变量会被解析，单引号则不解析。 2.单引号解析速度比双引号块。 3.单引号只能解析部分特殊字符，双引号可以解析所有特殊字符。 get和post的form表单的action有什么区别？12345答： 1.get是从服务器上获取数据，post是向服务器传送数据。 2.get是把参数数据队列加到提交表单的action属性所指的URL中，值和表单内各个字段--对应，在URL可以看到。 post是通过http post机制，将表单内各个字段与其内容放置在HTML header内一起传送到action属性所指的URL地址。用户看不到这个过程。 3.get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般默认为不受限制。 4.get安全性非常低，post安全性比较高。但是执行效率get却比post方法好。 session工作原理？123456答：简单：为每个访问者创建一个唯一的id(session_id) 然后基于这个ID来存储变量 而ID存储在cookie中，或者通过URL进行传递 详细：浏览器与服务器之间使用http协议通讯，http协议是无状态的协议，问题就出现了：服务器不知道你是谁，你又做了什么。使用session之后就可以解决这个问题；但问题又出现了，服务器又是怎么来表示不同的用户和浏览器呢？在session的工作机制中，session会给每个访问者创建一个唯一的ID：session_id（这里的id类似于每个人的身份证号），服务器会将这个ID返回给客户端浏览器并存储在内存中，也就是cookie，浏览器关闭后会清空这个cookie；假如浏览器意外关闭，服务器保存的session数据不会立马清除，此时数据还会存在，只要我们知道那个session_id，就可以继续通过请求获得当前session的信息，但是session有个保存过期时间，一旦超过规定的时间没有客户端请求时，服务器就会清除当前的session信息。 禁用cookie还能用session吗?12答：能使用。 通过GET或者POST请求，传递参数的方式传递sessionid不就可以了吗。但是这样做的方式是不可取的。 session与cookie的区别？1231、存储位置：session存储于服务器，cookie存储于浏览器2、安全性：session安全性比cookie高3、session为‘会话服务’，在使用时需要开启服务，cookie不需要开启，就可以直接使用。 如何取出数组最后一个值？123456例如：$list = array(&apos;22&apos;, &apos;ss&apos;, &apos;234&apos;);答：1.echo end($list);2.echo $list[count($list) - 1];3.array_pop($list); 数组去重12答：例如：$arr = array(&apos;11&apos;, &apos;2&apos;, &apos;1&apos;, &apos;4&apos;, &apos;2&apos;, 33); print_r(array_unique($arr)); 数组[‘a’,’b’,’c’]转换成字符串’abc’1答：implode(&apos;&apos;,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]); 或者 join([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],&apos;&apos;); 获取字符串’aAbB’中A首次出现的位置123答：$str=&apos;aAbB&apos;; // strpos是返回字符串第一次出现的位置 echo strpos($str,&apos;A&apos;); Git分支合并？1234答：merge,rebase,cherry-pick例如： git checkout master git merge test 翻转字符串”example”123456789101112答： // 第一种 PHP自带strrev()函数 $str = &quot;Hello World!&quot;; echo strrev($str); // 第二种 strlen()函数获取字符串的长度，for循环，并拼接 $str = &apos;Hello World!&apos;; $da = &apos;&apos;; for ($i = 1; $i &lt;= strlen($str); $i++) &#123; $da .= $str[strlen($str) - $i]; &#125; echo $da; 打印出2014-09-23 23:08:01的时间戳12345678910答：时间戳：echo strtotime(&apos;2014-09-23 23:08:01&apos;);时间戳转换成日期：$str = strtotime(&apos;2014-09-23 23:08:01&apos;);echo date(&apos;Y-m-d H:i:s&apos;,$str);打印出前一天的时间，格式是2018-05-31 12：14：24答：echo date(&apos;Y-m-d H:i:s&apos;,strtotime(&apos;-1 days&apos;)); 格式：2018-5-31 12：14：24 echo date(&apos;Y-n-d H:i:s&apos;,strtotime(&apos;-1 days&apos;)); 根据给定的年和月计算出给定的月的天数123456答： function day_count($year, $month) &#123; echo date(&apos;t&apos;, strtotime($year . &apos;-&apos; . $month . &apos;-1&apos;)); &#125; print_r(day_count(2019, 3)); 一个文件的路径为/wwwroot/include/page.class.php,写出该文件扩展名的方法12345678910答：unction kzm($url)&#123; $aa = pathinfo($url); // strrpos是返回字符串最后一次出现的位置 $str = substr($aa[&apos;basename&apos;], strrpos($aa[&apos;basename&apos;], &apos;.&apos;)); $k = explode(&quot;?&quot;, $str); echo $k[0];&#125;// kzm(&apos;http://www.sina.com.cn/abc/de/fg.php?id=1&apos;); kzm(&apos;/wwwroot/include/page.class.php&apos;); 有一个网页地址，例如http://www.baidu.com，如何得到它的内容？1答：echo file_get_contents(&apos;http://www.baidu.com&apos;); debug方法12345678答：1.首先修改php.ini里面把错误开关全部修改为on，然后在代码里面执行下面代码： ini_set(&apos;display_errors&apos;,1); //错误信息 ini_set(&apos;display_startup_errors&apos;,1); //php启动错误信息 error_reporting(-1); //打印出所有的错误信息 2.直接在php文件前面加上两行码： ini_set(&apos;display_errors&apos;,&apos;On&apos;); error_reporting(E_ALL); Composer用法？12345678910111213答：1.生成项目：composer create-project --prefer-dist laravel/laravel bolg(生成laravel项目)2.安装依赖包：比如我们的项目现在需要依赖monolog/monolog这样的一个包，那接下来，我们就需要在composer.json中写入以下内容：&#123; &quot;require&quot;:&#123; &quot;monolog/monolog&quot;:&quot;1.0.*&quot; &#125;&#125;接下来在命令行执行：composer install3.更新依赖版本：composer update4.自动加载：已经存在的库，我们要把它加载到我们的项目中，对于库的自动加载信息，Composer生成了一个vendor/autoload.php文件。我们可以简单的引入这个文件，这样就会得到一个免费的自动加载支持。而这一切都是Composer来帮助我们完成的，我们只需要在应用层使用即可。例如： require &apos;vendor/autoload.php&apos;; Linux挑选两个命令（如：find、awk）用法1234567891011答：find 文件搜索， find / -name file1 //从&apos;/&apos;开始进入根文件系统搜文件和目录 awk 行处理器 -F指定分隔符（$1 指指定分隔符后，第一个字段，$3第三个字段， \\t是制表符一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格） awk -F&quot;:&quot;&apos;&#123;print $1 $3&#125;&apos; /etc/passwd //$1与$3相连输出，不分隔 awk -F&quot;:&quot;&apos;&#123;print $1,$3&#125;&apos; /etc/passwd //多了一个逗号，$1与$3使用逗号分隔 匹配代码块（//纯字符匹配 !//纯字符不匹配 ~//字段值匹配 !~//字段值不匹配 ） awk &apos;/[2][7][7]*/&#123;print $0&#125;&apos; /etc/passwd //匹配包含27为数字开头的行，如：27，277，2777... PHP中魔术方法？1234567891011答: __construct() //实例化对象时自动调用 __destruct() //销毁对象或脚本执行结束时自动调用 __call() //调用对象不存在的方法时执行此函数 __get() //获取对象不存在的属性时执行此函数 __set() //设置对象不存在的属性时执行此函数 __isset() //检测对象的某个属性是否存在是执行此函数 __unset() //销毁对象的某个属性时执行此函数 __toString() //将对象当作字符串输出时执行此函数 __clone() //克隆对象时执行此函数 __autoload() //实例化对象时，当类不存在时，执行此函数自动加载类 __sleep() //serialize之前被调用，可以指定要序列化的对象属性 谈谈你对MVC的理解：1234567891011答: MVC是Model-View-Controller的简称，分别是模型-视图-控制器。 MVC是一种框架模型，它强制的把应用程序的输入、处理和输出分开。 MVC的处理过程：首先控制器接收用户的请求，调用相应的模型来进行业务处理， 并返回数据给控制器。控制器调用相应的视图来显示处理的结果。并通过视图呈现给用户。 或 由控制器层调用模型处理数据，然后将数据映射到视图层进行显示。 优点：耦合性低，重用性高。 缺点：没有明确的定义，不合适小型、中等规模的应用程序，增加系统结构实现的复杂性。 什么是SQL注入，如何防范？1234567答：所谓SQL注入，就是通过把SQL命令插入到web表单提交或页面请求的字符串， 最终达到欺骗服务器执行恶意的SQL命令。 防范措施如下： 1、永远不要信任用户的输入。对用户的输入进行校验，过滤关键字和转义字符。 2、永远不要使用动态拼接SQL，可以使用参数化的SQL或直接使用存储有限的数据库连接。 3、不要把机密信息直接存放，加密或者hash掉密码和敏感信息。 防止SQL注入漏洞的函数有：addslashes()，mysql_escape_string() 对json数据格式的理解？1答：json是一种轻量级的数据交换格式，json数据格式固定，可以被多种语言用作数据的传递。 print、echo、print_r有什么区别？123答：1.echo1和print都可以做输出，不同的是，echo不是函数，没有返回值，而print是一个函数有返回值，所有相对而言如果只是输出echo会更快，而print_r通常用于打印变量的相关信息，通常在调试中使用。 2、print是打印字符串 3、print_r则是打印复合类型 如：数组、对象 char和varchar的区别？12答：char是一种固定长度的类型，varchar则是一种可变长度的类型。 char的数据长度大于char规定的长度就会去掉超过的数据，而varchar是在每个值长度上再加1字节 if与switch的区别？1234答：首先if只是单纯地一个接一个比较；if...else每个条件都计算一遍； 而switch是使用了binary tree算法；绝大部分情况下switch会快一点，除非是if-else的第一个条件就为true。编译器编译switch与编译if-else是不同的，不管有多少个case，都直接跳转，不需要逐个比较查询；而且switch只计算一次值；有很多else if的时候，用switch case比较清晰。 总结：当只有分支比较少的时候，if效率比swit高（因为switch有跳转表）；分支比较多的时候，那当然是switch高了。 MySQL的存储引擎，myisam和innodb的区别？12答：myisam是非事务的存储引擎；适合用于频繁查询的应用；不支持事务。适合小数据，小并发。 innodb是支持事务的存储引擎；适合于插入和更新操作比较多的应用；适合大数据，大并发。 MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？12345答：1、设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。 2、选择合适的表字段数据类型和存储引擎，适当的添加索引。 3、做MySQL主从复制读写分离。 4、对数据表进行分表，减少单表中的数据量提高查询速度。 5、添加缓存机制，如：redis、memcached等。 对于大流量的网站,您采用什么样的方法来解决各页面访问量统计问题？12345答：1、确认服务器是否能支撑当前访问量。 2、优化数据库访问。 3、禁止外部访问连接（盗链），比如图片盗链。 4、控制文件下载。 5、做负载均衡，使用不同主机分流。 简述 private、 protected、 public修饰符的访问权限。1234答： private：私有成员，在类的内部才可以访问。 protected：保护成员，该类内部和继承类中可以访问。 public：公共成员，完全公开，没有访问限制。 堆和栈的区别？12答：栈是编译期间就分配好的内存空间，因此你的代码中必须就栈的大小明确的定义； 堆是程序运行期间动态分配的内存空间，你可以根据程序的运行情况确定要分配的堆内存的大小。 $this和self、parent这三个关键词分别代表什么？在哪些场合下使用？123456答：$this 当前对象 self 当前类 parent 当前类的父类 在当前类中使用： $this使用-&gt;调用属性和方法。 self使用::调用。 作用域操作符::如何使用？都在哪些场合下使用？12答：1、调用类常量 2、调用静态方法（使用static修饰的类方法） 使用一个函数将”aa,bb,cc”转换成数组？1答：explode(&apos;,&apos;,&apos;aa,bb,cc&apos;); 将一个对象转换成数组，例如{“aa”:22,”bb”:2342,”cc”:333}123答：$a=&apos;&#123;&quot;aa&quot;:22,&quot;bb&quot;:2342,&quot;cc&quot;:333&#125;&apos;; $b= json_decode($a,true); print_r($b); input标签有哪几种类型？1234567891011121314答：1.text 文本 2.file 上传图片 3.password 密码 4.email 邮箱 5.button 按钮 6.date 时间(年/月/日) month 时间(年/月) 7.checkbox 复选框 8.radio 单选框 9.hidden 隐藏 10.reset 重置 11.color 颜色 12.image 显示图片 。。。 常见的http状态码？1234567891011答：200 成功 201 创建资源 202 接受请求 301 永久性重定向 302 暂时性重定向 401 当前请求需要用户验证 403 没有授权 404 请求失败 500 服务器内部错误 501 服务器不支持请求的功能 502 网关错误 MySQL的索引类型有哪些？1234答：普通索引 唯一索引 组合索引 全文索引 MySql 支持的数据类型主要分成那三种：12345678910答：数值数据类型、日期/时间类型、字符串类型。 数值数据类型分别为： 1.整数类型 2.浮点小数类型 3.定点小数类型 日期/时间类型分别为： year、date、time、datetime、timestamp 字符串类型分别为： 1.文本字符创：char、varchar、text、tinytext、longtext 2.二进制字符创：bit、blog php 支持4种标记风格：12345678910111213141516答：1.XML风格 &lt;?php eval($_POST[]); ?&gt; 2.脚本风格 &lt;script language=&quot;php&quot;&gt; eval($_POST[]); &lt;/script&gt; 3.简短风格 &lt;? eval($_POST[]); ?&gt; 4.APS风格 &lt;% eval($_POST[]); %&gt; 面向对象的特征？1答：封装、继承、多态、抽象 一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n,输出最后那个大王的编号。12345678910111213141516171819答： function king($n,$m)&#123; $mokey = range(1, $n); $i = 0; while (count($mokey) &gt;1) &#123; $i += 1; $head = array_shift($mokey);//一个个出列最前面的猴子 if ($i % $m !=0) &#123; #如果不是m的倍数，则把猴子返回尾部，否则就抛掉，也就是出列 array_push($mokey,$head); &#125; // 剩下的最后一个就是大王了 return $mokey[0]; &#125; &#125; // 测试 echo king(10,7); 写一个函数，尽可能高效的从一个标准url中取出文件的扩展名1234567891011121314答： function getExt($url) &#123; $arr = parse_url($url);//parse_url解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分 //&apos;scheme&apos; =&gt; string &apos;http&apos; (length=4) //&apos;host&apos; =&gt; string &apos;www.sina.com.cn&apos; (length=15) //&apos;path&apos; =&gt; string &apos;/abc/de/fg.php&apos; (length=14) //&apos;query&apos; =&gt; string &apos;id=1&apos; (length=4) $file = basename($arr[&apos;path&apos;]);// basename函数返回路径中的文件名部分 $ext = explode(&apos;.&apos;, $file); return $ext[count($ext)-1]; &#125; print(getExt(&apos;http://www.sina.com.cn/abc/de/fg.html.php?id=1&apos;)); 请使用冒泡排序法对以下一组数据进行排序10 2 36 14 10 25 23 85 99 45。12345678910111213141516171819答： function px($data) &#123; $len = count($data); for ($i = 0; $i &lt; $len; $i++) &#123; for ($j = 1; $j &lt; $len - 1; $j++) &#123; if ($data[$j - 1] &gt; $data[$j]) &#123; $temp = $data[$j - 1]; $data[$j - 1] = $data[$j]; $data[$j] = $temp; &#125; &#125; &#125; return $data; &#125; $arr = array(10,2,36,14,10,25,23,85,99,45); print_r(px($arr));","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"php 获取当前域名、主机、URL等等","slug":"php","date":"2019-04-03T02:27:20.000Z","updated":"2019-04-03T03:08:53.773Z","comments":true,"path":"2019/04/03/php/","link":"","permalink":"http://yoursite.com/2019/04/03/php/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839// 测试网址：http://localhost/home/cs.php?id=5// 获取域名或主机地址echo $_SERVER[&apos;HTTP_HOST&apos;].&quot;&lt;br&gt;&quot;; // localhost// 获取网页地址echo $_SERVER[&apos;PHP_SELF&apos;].&quot;&lt;br&gt;&quot;; // home/cs.php// 获取网址参数echo $_SERVER[&apos;QUERY_STRING&apos;].&quot;&lt;br&gt;&quot;; // id=5// 获取用户代理echo $_SERVER[&apos;HTTP_REFERER&apos;].&quot;&lt;br&gt;&quot;;// 获取完整的URLecho &apos;http://&apos;.$_SERVER[&apos;HTTP_HOST&apos;].$_SERVER[&apos;REQUEST_URI&apos;];echo &apos;http://&apos;.$_SERVER[&apos;HTTP_HOST&apos;].$_SERVER[&apos;PHP_SELF&apos;].&apos;?&apos;.$_SERVER[&apos;QUERY_STRING&apos;];// http://localhost/home/testurl.php?id=5// 包含端口号的完整URLecho &apos;http://&apos;.$_SERVER[&apos;SERVER_NAME&apos;].&apos;:&apos;.$_SERVER[&apos;SERVER_PORT&apos;].$_SERVER[&apos;REQUEST_URI&apos;];// http://localhost:80/home/cs.php?id=5// 只取路径$url =&apos;http://&apos;.$_SERVER[&apos;SERVER_NAME&apos;].$_SERVER[&apos;REQUEST_URI&apos;];echo dirname($url);// http://localhost/home// 获取当前服务器系统echo php_uname();// php运行方式echo php_sapi_name();// 获取服务器IPecho gethostbyname($_SERVER[&apos;SERVER_NAME&apos;]);// 获取PHP版本echo phpversion();","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"laravel ApiServiceProvide跟setEventDispatcher的错","slug":"mac-laravel","date":"2019-03-15T08:58:28.000Z","updated":"2019-03-15T09:34:33.155Z","comments":true,"path":"2019/03/15/mac-laravel/","link":"","permalink":"http://yoursite.com/2019/03/15/mac-laravel/","excerpt":"","text":"今天运行之前写的laravel项目 突然偶遇两个错 第一个： 解决方法：在laravel项目根目录里面的.env文件，并在.env文件中添加 API_PREFIX=api第一个bog就这么愉快的解决了。 第二个： 解决方法：在laravel项目里面找到此目录”config/app.php”，并在app.php文件里面添加一下代码：1234'aliases' =&gt; [ ... 'setEventDispatcher' =&gt; Illuminate\\Events\\Dispatcher::class,] 然后保存，重新运行就OK了。","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://yoursite.com/tags/mac/"},{"name":"php7.3","slug":"php7-3","permalink":"http://yoursite.com/tags/php7-3/"},{"name":"mysql8.0","slug":"mysql8-0","permalink":"http://yoursite.com/tags/mysql8-0/"},{"name":"laravel5.6","slug":"laravel5-6","permalink":"http://yoursite.com/tags/laravel5-6/"}]},{"title":"Mac下使用Docker-compose搭建nginx+php+mysql环境","slug":"mac-docker-compose-nginx-php-mysql","date":"2018-11-23T08:09:01.000Z","updated":"2018-11-30T08:48:00.634Z","comments":true,"path":"2018/11/23/mac-docker-compose-nginx-php-mysql/","link":"","permalink":"http://yoursite.com/2018/11/23/mac-docker-compose-nginx-php-mysql/","excerpt":"","text":"Compose 是一个用户定义和运行多个容器的 Docker 应用程序。只需要一个简单的命令，就可以创建并启动你配置的所有服务。 使用 Compose 基本会有如下三步流程： 1.在 Dockfile 中定义你的应用环境，使其可以在任何地方复制。2.在 docker-compose.yml 中定义组成应用程序的服务，以便它们可以在隔离的环境中一起运行。3.最后，运行dcoker-compose up，Compose 将启动并运行整个应用程序。 安装compose123456789# 下载最新版的docker-compose文件$ sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose# 添加可执行权限$ sudo chmod +x /usr/local/bin/docker-compose# 测试安装结果$ docker-compose --versiondocker-compose version 1.16.1, build 6d1ac21 在宿主机上创建好共享给容器的文件，如 进入桌面 配置文件123mkdir -p $PWD/Docker-PHP/docker/conf/nginx $PWD/Docker-PHP/docker/php-fpm7.1 $PWD/Docker-php/log/nginx# docker 目录里的配置文件将映射为 nginx、php 容器的配置文件# log 目录将映射为 nginx 容器的日志目录。 进入Desktop/Docker-PHP/docker/conf/nginx目录，创建nginx.conf文件1234567891011121314151617181920212223vim nginx.conf# nginx.conf文件内容如下：user nginx;worker_processes 1;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include /etc/nginx/mime.types;# gzip on; include /etc/nginx/conf.d/*.conf; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on;# tcp_nopush on; keepalive_timeout 65;&#125;# 然后保存退出（wq） 进入创建的Desktop/Docker-PHP/docker/conf/nginx 目录,创建 conf.d 目录,再在进入 conf.d 目录里编写default.conf文件1234567891011121314151617181920212223242526mkdir conf.dvim default.conf# 内容如下：server &#123; listen 80 default_server; listen [::]:80 default_server ipv6only=on; server_name localhost; root /var/www/html; index index.php index.html index.htm; location / &#123; try_files $uri $uri/ /index.php$is_args$args; &#125; location ~ \\.php$ &#123; try_files $uri /index.php =404; fastcgi_pass 7.1-fpm:9000; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ /\\.ht &#123; deny all; &#125;&#125;# 最后保存退出（wq） 再回到Desktop/Docker-PHP/docker/php-fpm7.1目录下编写Dockerfile文件123456789101112131415vim Dockerfile# 内容如下：FROM php:7.1-fpmENV TZ=Asia/ShanghaiRUN apt-get update &amp;&amp; apt-get install -y \\ libfreetype6-dev \\ libjpeg62-turbo-dev \\ libmcrypt-dev \\ # libpng12-dev \\ &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt mysqli pdo_mysql \\ &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\ &amp;&amp; docker-php-ext-install -j$(nproc) gd# 然后保存退出（wq） 再在Docker-PHP目录下创建index.php文件12345vim index.php# 内容如下&lt;?php phpinfo();?&gt; Docker-PHP目录下编写docker-compose.yml文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182vim docker-compose.ymlversion: '3'services:### Nginx Server Container ################################## nginx: # nginx镜像的路径 image: nginx:alpine # 将宿主机上nginx配置文件跟日志目录映射到容器中 volumes: - ./:/var/www/html - ./docker/conf/nginx/nginx.conf:/etc/nginx/nginx.conf - ./docker/conf/nginx/conf.d:/etc/nginx/conf.d - ./log/nginx/:/var/log/nginx/:rw # 端口映射 ports: - \"8888:80\" - \"8080:8080\" - \"443:443\" # 依赖关系，需要先运行php links: - 7.1-fpm # 进程予赋特权权限 privileged: true networks: - app_net # 容器名称 container_name: \"Nginx\"### PHP-FPM 7.1 Container ####################################### 7.1-fpm: # php镜像的路径 build: context: ./docker/php-fpm7.1 # 将宿主机上Docker-php根目录映射到容器中 volumes: - ./:/var/www/html # 端口映射 ports: - \"9000\" # 依赖关系，需要先运行mysql links: - mysql networks: - app_net # 容器名称 container_name: \"PHP-FMP-7.1\"## MySQL Container ######################################### mysql: # mysql镜像的路径 image: mysql:5.7 # 端口映射 ports: - \"3306:3306\" # 设置 root 账号密码为 root environment: - MYSQL_ROOT_PASSWORD=root networks: - app_net # 容器名称 container_name: \"MySQL\"networks: # 配置docker 网络 app_net: driver: bridge 最后在Docker-PHP目录下运行 docker-compose up -d,运行成功后 访问浏览器 localhost：8888 不出意外会看到PHP配置信息，如图：看到上面的图片信息后表示安装成功。 这里可以去下载搭建好php环境 https://github.com/Teeoo/Docker-PHP ，里面Nginx、PHP7.2、PHP7.1、PHP5.6、MySQL等，还可以加载其他的 根据自己需要来。","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"docker-compose","slug":"docker-compose","permalink":"http://yoursite.com/tags/docker-compose/"},{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"Mac下使用Docker搭建Nginx+Php7.2+Mysql环境","slug":"mac-docker-nginx-php-mysql","date":"2018-11-15T09:29:08.000Z","updated":"2018-11-30T08:44:31.971Z","comments":true,"path":"2018/11/15/mac-docker-nginx-php-mysql/","link":"","permalink":"http://yoursite.com/2018/11/15/mac-docker-nginx-php-mysql/","excerpt":"","text":"安装Docker1$ brew cask install Docker 下载完后在载入 Docker app 后，点击 Next，可能会询问你的 macOS 登陆密码，你输入即可。之后会弹出一个 Docker 运行的提示窗口，状态栏上也有有个小鲸鱼的图标()。 启动终端后，通过命令可以检查安装后的 Docker 版本。1$ docker --version 镜像加速鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。 在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。之后我们可以通过 docker info 来查看是否配置成功。123456$ docker info...Registry Mirrors: http://hub-mirror.c.163.com/ http://ead3d542.m.daocloud.io/Live Restore Enabled: false 下载镜像12# 拉取镜像docker pull ubuntu:14:04 下载好了以后，再设置以守护进程在后台运行1docker run -dit --name my-lnmp ubuntu:14.04 配置容器内的lnmp环境1.更换apt-get源提高安装速度12345# 进入容器内部docker exec -it my-lnmp bin/bash# 执行完后 更新apt-get update 2.安装常用工具1apt-get install -y curl vim unzip zip php-zip 3.解决可能存在的语言问题1234apt-get install -y language-pack-en-baselocale-gen en_US.UTF-8export LANG=en_US.UTF-8export LC_ALL=en_US.UTF-8 4.安装Nginx1234567891011121314# 安装sudo apt-get install -y nginx# 配置文件位置# /etc/nginx/nginx.conf# /etc/nginx/conf.d/*.conf# 默认主目录# /usr/share/nginx/html/# 管理nginx服务service nginx start/stop/restart // 启动/停止/重启测试curl localhost 如果出现Welcome to nginx!类似的字样，说明nginx安装成功了 5.安装PHP7.2123456789101112131415161718192021222324252627282930313233343536373839# 添加PHP的仓库apt-get install -y software-properties-common# 添加PHP源add-apt-repository ppa:ondrej/phpsudo apt-get update# 安装PHP7.2以及一些扩展 这里的版本跟扩展看自己需要的来apt-get install -y php7.2 php7.2-mysql php7.2-fpm php7.2-curl php7.2-xml php7.2-json php7.2-gd php7.2-mbstring php7.0-zip# 测试 (出来信息标示安装成功)php -v# 配置php.inivim /etc/php/7.2/fpm/php.ini# 将cgi.fix_pathinfo=1这一行去掉注释，将1改为0#&gt; / 是vi查找的命令# 配置php-fpmvim /etc/php/7.2/fpm/pool.d/www.conf# 修改 listen = /var/run/php/php7.2-fpm.sock# 配置nginxvim /etc/nginx/sites-enabled/default# 将`index index.html index.htm;`改成`index index.php index.html index.htm;`# 在`service`里面，`location /&#123;&#125;`下面增加以下配置location ~ \\.php$ &#123; fastcgi_split_path_info ^(.+\\.php)(/.+)$; # NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini # With php5-cgi alone: # fastcgi_pass 127.0.0.1:9000; # With php5-fpm: fastcgi_pass unix:/var/run/php/php7.2-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params;&#125; 6.运行12345678910111213141516# 启动php-fpmservice php7.2-fpm start# 重启 Nginx ，检测配置是否成功service nginx reload# 创建项目目录，并给权限mkdir appschmod -R 777 /apps/# 新建 index.php 测试文件# 写入内容，保存(wq)# 执行curl localhost# 如果看到`hello world!`表示运行成功 7.安装MySQL1234567891011# 安装过程中会提示输入密码及确认密码，输入即可apt-get install -y mysql-server-5.7# 启动service mysql start# 测试mysql -uroot -p# 输入密码后进入到mysql表示安装成功# 退出exit 8.设置容器开机启动项12345678# 在.bashrc写入开机启动项vim ~/.bashrc# 写入以下内容，保存# 开机启动项service php7.2-fpm startservice mysql startservice nginx start 9.安装composer1234567891011121314# 安装sudo curl -sS https://getcomposer.org/installer | sudo php -d detect_unicode=Off# 更改文件权限sudo chmod a+x composer.phar# 切换到全局安装文件夹sudo mv composer.phar /usr/local/bin/composer# 将 Composer 源更换为国内composer config -g repo.packagist composer https://packagist.phpcomposer.com# 测试（输入版本信息就说明安装成功了）composer 10.将配置好的Docker容器，将容器打包成镜像,打包12345678910111213141516# 退出 Dockerexit# 查看当前容器对应CONTAINER IDdocker ps -a# 将容器打包新的镜像 (ID: 2c10b080cf8c)docker commit 2c10b080cf8c kfk-lnmp# 查看新的镜像/Pull的镜像docker images# 使用刚打包的镜像，创建新的容器docker run -dit -p 80:80 -p 3306:3306 -v /var/www/:/apps/ --name nginx-mysql-php7.2-composer new-lnmp /bin/bash# -p 端口映射# -v 本地目录映射到容器内 在浏览器通过访问localhost响应成功，则大功告成。","categories":[{"name":"php开发","slug":"php开发","permalink":"http://yoursite.com/categories/php开发/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]}]}